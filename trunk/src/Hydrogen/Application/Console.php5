<?php
/**
 *	Application class for a console program.
 *
 *	Copyright (c) 2014 Christian Würker (ceusmedia.com)
 *
 *	This program is free software: you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation, either version 3 of the License, or
 *	(at your option) any later version.
 *
 *	This program is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *	@category		cmFrameworks
 *	@package		Hydrogen.Application.Web
 *	@author			Christian Würker <christian.wuerker@ceusmedia.de>
 *	@copyright		2014 Christian Würker
 *	@license		http://www.gnu.org/licenses/gpl-3.0.txt GPL 3
 *	@link			http://code.google.com/p/cmframeworks/
 *	@since			0.1
 *	@version		$Id: Site.php5 1509 2014-01-31 02:34:45Z christian.wuerker $
 */
/**
 *	Application class for a console program.
 *	@category		cmFrameworks
 *	@package		Hydrogen.Application.Web
 *	@author			Christian Würker <christian.wuerker@ceusmedia.de>
 *	@copyright		2014 Christian Würker
 *	@license		http://www.gnu.org/licenses/gpl-3.0.txt GPL 3
 *	@link			http://code.google.com/p/cmframeworks/
 *	@since			0.1
 *	@version		$Id: Site.php5 1509 2014-01-31 02:34:45Z christian.wuerker $
 *	@todo			Code Documentation
 */
class CMF_Hydrogen_Application_Console extends CMF_Hydrogen_Application_Abstract
{
	public function __construct( $env = NULL ){
		parent::__construct( $env );
		$this->env->request	= new Console_Command_ArgumentParser();
	}

	/**
	 *	Executes called Controller and stores generated View.
	 *	@access		protected
	 *	@return		string		Content generated by view triggered by controller
	 *	@throws		Exception	if a exception is caught and neither error view not messenger is available
	 */
	protected function dispatch( $default = NULL )
	{
		$request		= $this->env->getRequest();
		try
		{
			die("... dispatch ..." );
			print_m( $this->request->getAll() );
		}
		catch( Exception $e )
		{
			$this->env->getMessenger()->noteFailure( $e->getMessage() );
		}
	}


	/**
	 *	General main application method.
	 *	You can copy and modify this method in your application to handle exceptions your way.
	 *	NOTE: You need to execute $this->respond( $this->main() ) in order to start dispatching, controlling and rendering.
	 *	@access		public
	 *	@return		void
	 */
	public function run()
	{
		error_reporting( E_ALL );
		try
		{
			$this->dispatch();
			if( $this->messenger->count() )
				die( "MSG!!!");
			$this->env->close();																	//  teardown environment and quit application execution
		}
		catch( Exception $e )
		{
			die( "Error: ".$e->getMessage()."\n" );
		}
	}
}
?>